use std::{path::PathBuf, process::Command};

use structopt::StructOpt;

#[derive(StructOpt, Debug)]
pub struct InitOptions {
    /// Directory of the project
    #[structopt(short, long, default_value = ".")]
    dir: PathBuf,
}

const DEFAULT_BUILD_RS: &str = "
// This file is automatically generated by `cargo duchess init`.
use duchess_build_rs::DuchessBuildRs;

fn main() -> anyhow::Result<()> {
    DuchessBuildRs::new().execute()
}
";

const ONE_LINE: &str = "duchess_build_rs::DuchessBuildRs::new().execute().unwrap()";

pub fn init(options: InitOptions) -> anyhow::Result<()> {
    let InitOptions { dir } = options;

    if !dir.exists() {
        anyhow::bail!("directory `{}` not found", dir.display());
    }

    if !dir.is_dir() {
        anyhow::bail!("`{}` is not a directory", dir.display());
    }

    let cargo_toml_path = dir.join("Cargo.toml");
    if !cargo_toml_path.exists() {
        anyhow::bail!(
            "directory `{}` does not contain a `Cargo.toml`",
            dir.display()
        );
    }

    Command::new("cargo")
        .arg("add")
        .arg("duchess")
        .current_dir(&dir)
        .spawn()?
        .wait()?;

    Command::new("cargo")
        .arg("add")
        .arg("--build")
        .arg("duchess-build-rs")
        .current_dir(&dir)
        .spawn()?
        .wait()?;

    // If `build.rs` does not exist, initialize it with default.
    let build_rs_path = dir.join("build.rs");
    if !build_rs_path.exists() {
        std::fs::write(&build_rs_path, DEFAULT_BUILD_RS)?;
    } else {
        // Tell user to add it themselves
        // (FIXME: use syn to insert it)
        eprintln!("Warning: `build.rs` already exists. Please add the following line to `main`:");
        eprintln!();
        eprintln!("```rust");
        eprintln!("{}", ONE_LINE);
        eprintln!("```");
    }

    Ok(())
}
